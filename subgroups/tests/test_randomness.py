from ..datastorage.base import MaskMarginStorage
from ..datasamplers.mask_generators import fixed_alpha_mask_factory
from ..datasets.test_data import RandomDataset
from ..models.classifier import XgbFactory, XgbFactoryInitializer
from ..datastorage.experiment import Experiment
from ..experiments.pipeline_tc import pipeline_tc
from ..experiments.pipeline_snr import pipeline_snr
from ..datasamplers.mask_generators import fixed_alpha_mask_factory_initializer
from ..datasamplers.random_generators import RandomGeneratorSNR, RandomGeneratorTC
import numpy as np

def test_mask_storage_across_seeds():
    """
    Test that the masks stored in the MaskMarginStorage object are unique across different seeds.
    """
    random_dataset = RandomDataset()
    storage = MaskMarginStorage(n_models=20, n_samples=random_dataset.num_samples, labels=random_dataset.coarse_labels, mask_factory=fixed_alpha_mask_factory(alpha=0.1), in_memory=True, mask_seed=1)
    arr1 = storage.masks

    storage = MaskMarginStorage(n_models=20, n_samples=random_dataset.num_samples, labels=random_dataset.coarse_labels, mask_factory=fixed_alpha_mask_factory(alpha=0.1), in_memory=True, mask_seed=2)
    arr2 = storage.masks

    assert not np.all(arr1 == arr2)

def test_fixed_alpha_mask_factory_across_seeds():
    """
    Test that the masks generated by the fixed_alpha_mask_factory are unique across different seeds.
    """
    random_dataset = RandomDataset()
    labels = random_dataset.coarse_labels

    arr1 = fixed_alpha_mask_factory(alpha=0.1).get_masks(labels=labels, seed=1)
    arr2 = fixed_alpha_mask_factory(alpha=0.1).get_masks(labels=labels, seed=2)

    assert not np.all(arr1 == arr2)

def test_model_across_seeds():
    """
    Test that the model generated by the xgboost factory have different random states across different seeds.
    """
    params1 = XgbFactory().build_model(seed=3).get_params()
    params2 = XgbFactory().build_model(seed=4).get_params()

    # random states should be different, but parameters should be the same
    assert params1['random_state'] != params2['random_state']
    assert params1['learning_rate']==params2['learning_rate']

def test_model_factory_across_seeds():
    """
    Test that the model factory generated by the xgboost factory have different random states across different seeds.
    """
    model_factory1 = XgbFactoryInitializer().build_model_factory(seed=3)
    model_factory2 = XgbFactoryInitializer().build_model_factory(seed=4)

    assert model_factory1.learning_rate != model_factory2.learning_rate

def test_tc_pipeline_across_seeds():
    """
    Test that the tc pipeline returns different masks and margins across different seeds.
    """
    random_dataset = RandomDataset()

    exp = Experiment(dataset=random_dataset, 
            mask_factory=fixed_alpha_mask_factory(alpha=0.1), 
            model_factory=XgbFactory(), 
            model_factory_initializer=XgbFactoryInitializer(), 
            mask_factory_initializer=fixed_alpha_mask_factory_initializer(),
            in_memory=True, 
            snr_n_train_splits=5, 
            snr_n_model_inits=3,
            snr_random_generator=RandomGeneratorSNR,
            tc_random_generator=RandomGeneratorTC)

    run1 = pipeline_tc(exp, batch_size=3, batch_starter_seed=1)
    run2 = pipeline_tc(exp, batch_size=3, batch_starter_seed=1)

    assert np.all(run1.masks==run2.masks)
    assert np.all(run1.margins==run2.margins)

    run2 = pipeline_tc(exp, batch_size=3, batch_starter_seed=2)

    assert not np.all(run1.masks==run2.masks)
    assert not np.all(run1.margins==run2.margins)

def test_snr_across_seeds():
    """
    Test that the snr pipeline returns different snr across different seeds.
    """
    random_dataset = RandomDataset()

    exp = Experiment(dataset=random_dataset, 
           mask_factory=fixed_alpha_mask_factory(alpha=0.1), 
           model_factory=XgbFactory(), 
           model_factory_initializer=XgbFactoryInitializer(), 
           mask_factory_initializer=fixed_alpha_mask_factory_initializer(),
           in_memory=True, 
           snr_n_train_splits=2, 
           snr_n_model_inits=2,
           snr_random_generator=RandomGeneratorSNR,
           tc_random_generator=RandomGeneratorTC)

    snr1 = pipeline_snr(exp, batch_size=2, batch_starter_seed=0)
    snr2 = pipeline_snr(exp, batch_size=2, batch_starter_seed=0)

    assert np.all(snr1==snr2)

    snr2 = pipeline_snr(exp, batch_size=2, batch_starter_seed=1)

    assert not np.all(snr1==snr2)