from ..datastorage.mask_margin import MaskMarginStorage
from ..datasamplers.mask_generators import fixed_alpha_mask_factory
from ..datasets.test_data import RandomDataset
from ..models.classifier import XgbFactory, XgbFactoryInitializer
from ..datastorage.experiment import Experiment
from ..experiments.pipeline_tc import pipeline_tc
from ..experiments.pipeline_snr import pipeline_snr
from ..datasamplers.mask_generators import fixed_alpha_mask_factory_initializer
from ..datasamplers.random_generators import RandomGeneratorSNR, RandomGeneratorTC
from ..experiments.stopping_condition import SNRPrecisionStopping
import numpy as np

def test_mask_storage_across_seeds():
    """
    Test that the masks stored in the MaskMarginStorage object are unique across different seeds.
    """
    random_dataset = RandomDataset()
    storage = MaskMarginStorage(n_models=20, n_samples=random_dataset.num_samples, labels=random_dataset.coarse_labels, mask_factory=fixed_alpha_mask_factory(alpha=0.1), in_memory=True, rng=np.random.default_rng(1))
    arr1 = storage.masks

    storage = MaskMarginStorage(n_models=20, n_samples=random_dataset.num_samples, labels=random_dataset.coarse_labels, mask_factory=fixed_alpha_mask_factory(alpha=0.1), in_memory=True, rng=np.random.default_rng(2))
    arr2 = storage.masks

    assert not np.all(arr1 == arr2)

def test_fixed_alpha_mask_factory_across_seeds():
    """
    Test that the masks generated by the fixed_alpha_mask_factory are unique across different seeds.
    """
    random_dataset = RandomDataset()
    labels = random_dataset.coarse_labels

    arr1 = fixed_alpha_mask_factory(alpha=0.1).get_masks(labels=labels, rng=np.random.default_rng(1))
    arr2 = fixed_alpha_mask_factory(alpha=0.1).get_masks(labels=labels, rng=np.random.default_rng(2))

    assert not np.all(arr1 == arr2)

def test_model_across_seeds():
    """
    Test that the model generated by the same xgboost factory have different random states across different seeds, but the same parameters.
    """
    params1 = XgbFactory().build_model(rng=np.random.default_rng(3)).get_params()
    params2 = XgbFactory().build_model(rng=np.random.default_rng(4)).get_params()

    # random states should be different, but parameters should be the same
    assert params1['random_state'] != params2['random_state']
    assert params1['learning_rate']==params2['learning_rate']

def test_model_factory_across_seeds():
    """
    Test that models generated by different model factories have different model parameters.
    """
    model_factory1 = XgbFactoryInitializer().build_model_factory(rng=np.random.default_rng(3))
    model_factory2 = XgbFactoryInitializer().build_model_factory(rng=np.random.default_rng(4))

    assert model_factory1.max_depth != model_factory2.max_depth
